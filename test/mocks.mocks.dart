// Mocks generated by Mockito 5.4.6 from annotations
// in sweat_and_beers/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:google_maps_webservice/places.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sweat_and_beers/features/detail/domain/usecases/get_place_details_usecase.dart'
    as _i8;
import 'package:sweat_and_beers/features/search/domain/entities/search_result.dart'
    as _i7;
import 'package:sweat_and_beers/features/search/domain/repositories/location_repository.dart'
    as _i4;
import 'package:sweat_and_beers/features/search/domain/usecases/search_places_usecase.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlaceDetails_1 extends _i1.SmartFake implements _i3.PlaceDetails {
  _FakePlaceDetails_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepository extends _i1.Mock
    implements _i4.LocationRepository {
  @override
  _i5.Future<_i2.Position> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i5.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getCurrentLocation, [])),
            ),
            returnValueForMissingStub: _i5.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getCurrentLocation, [])),
            ),
          )
          as _i5.Future<_i2.Position>);
}

/// A class which mocks [SearchPlacesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchPlacesUseCase extends _i1.Mock
    implements _i6.SearchPlacesUseCase {
  @override
  _i5.Future<List<_i7.SearchResult>> call(
    String? query, {
    required _i2.Position? location,
    required int? radius,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [query],
              {#location: location, #radius: radius},
            ),
            returnValue: _i5.Future<List<_i7.SearchResult>>.value(
              <_i7.SearchResult>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i7.SearchResult>>.value(
              <_i7.SearchResult>[],
            ),
          )
          as _i5.Future<List<_i7.SearchResult>>);
}

/// A class which mocks [GetPlaceDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPlaceDetailsUseCase extends _i1.Mock
    implements _i8.GetPlaceDetailsUseCase {
  @override
  _i5.Future<_i3.PlaceDetails> call(String? placeId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [placeId]),
            returnValue: _i5.Future<_i3.PlaceDetails>.value(
              _FakePlaceDetails_1(this, Invocation.method(#call, [placeId])),
            ),
            returnValueForMissingStub: _i5.Future<_i3.PlaceDetails>.value(
              _FakePlaceDetails_1(this, Invocation.method(#call, [placeId])),
            ),
          )
          as _i5.Future<_i3.PlaceDetails>);
}
